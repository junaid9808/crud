{"ast":null,"code":"var _jsxFileName = \"D:\\\\crudOperations\\\\frontend-apis\\\\src\\\\ReactDraganddrop.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from \"react\";\nimport ReactFlow, { addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { nodes as initialNodes, edges as initialEdges } from \"./initial-elements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst onInit = reactFlowInstance => console.log(\"flow loaded:\", reactFlowInstance);\nconst OverviewFlow = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback(params => {\n    const newEdge = {\n      ...params,\n      style: {\n        stroke: \"#\" + (Math.random() * 0xffffff << 0).toString(16)\n      } // Random edge color\n    };\n\n    setEdges(prevEdges => [...prevEdges, newEdge]);\n  }, [setEdges]);\n  function generateRandomNode() {\n    const randomId = Math.random().toString(36).substring(7);\n    const randomColor = \"#\" + (Math.random() * 0xffffff << 0).toString(16);\n    return {\n      id: randomId,\n      type: \"default\",\n      // Set your desired node type\n      data: {\n        label: randomId\n      },\n      // Customize node data as needed\n      position: {\n        x: 0,\n        y: 0\n      },\n      // Initial position\n      style: {\n        background: randomColor\n      } // Node background color\n    };\n  }\n\n  const addRandomNode = () => {\n    const newNode = generateRandomNode();\n    setNodes(prevNodes => [...prevNodes, newNode]);\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect,\n    onInit: onInit,\n    fitView: true,\n    attributionPosition: \"top-right\",\n    children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n      nodeStrokeColor: n => {\n        var _n$style;\n        if ((_n$style = n.style) !== null && _n$style !== void 0 && _n$style.background) return n.style.background;\n        if (n.type === \"input\") return \"#0041d0\";\n        if (n.type === \"output\") return \"#ff0072\";\n        if (n.type === \"default\") return \"#1a192b\";\n        return \"#eee\";\n      },\n      nodeColor: n => {\n        var _n$style2;\n        if ((_n$style2 = n.style) !== null && _n$style2 !== void 0 && _n$style2.background) return n.style.background;\n        return \"#fff\";\n      },\n      nodeBorderRadius: 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Background, {\n      color: \"#aaa\",\n      gap: 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(OverviewFlow, \"mmoxFmHOvuuD77aIm5gUqDEdUKU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = OverviewFlow;\nexport default OverviewFlow;\nvar _c;\n$RefreshReg$(_c, \"OverviewFlow\");","map":{"version":3,"names":["React","useCallback","ReactFlow","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","nodes","initialNodes","edges","initialEdges","jsxDEV","_jsxDEV","onInit","reactFlowInstance","console","log","OverviewFlow","_s","setNodes","onNodesChange","setEdges","onEdgesChange","onConnect","params","newEdge","style","stroke","Math","random","toString","prevEdges","generateRandomNode","randomId","substring","randomColor","id","type","data","label","position","x","y","background","addRandomNode","newNode","prevNodes","fitView","attributionPosition","children","nodeStrokeColor","n","_n$style","nodeColor","_n$style2","nodeBorderRadius","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","_c","$RefreshReg$"],"sources":["D:/crudOperations/frontend-apis/src/ReactDraganddrop.js"],"sourcesContent":["import React, { useCallback } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nimport {\r\n  nodes as initialNodes,\r\n  edges as initialEdges,\r\n} from \"./initial-elements\";\r\n\r\nconst onInit = (reactFlowInstance) =>\r\n  console.log(\"flow loaded:\", reactFlowInstance);\r\n\r\nconst OverviewFlow = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n  const onConnect = useCallback(\r\n    (params) => {\r\n      const newEdge = {\r\n        ...params,\r\n        style: { stroke: \"#\" + ((Math.random() * 0xffffff) << 0).toString(16) }, // Random edge color\r\n      };\r\n      setEdges((prevEdges) => [...prevEdges, newEdge]);\r\n    },\r\n    [setEdges]\r\n  );\r\n\r\n  function generateRandomNode() {\r\n    const randomId = Math.random().toString(36).substring(7);\r\n    const randomColor = \"#\" + ((Math.random() * 0xffffff) << 0).toString(16);\r\n    return {\r\n      id: randomId,\r\n      type: \"default\", // Set your desired node type\r\n      data: { label: randomId }, // Customize node data as needed\r\n      position: { x: 0, y: 0 }, // Initial position\r\n      style: { background: randomColor }, // Node background color\r\n    };\r\n  }\r\n  const addRandomNode = () => {\r\n    const newNode = generateRandomNode();\r\n    setNodes((prevNodes) => [...prevNodes, newNode]);\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      nodes={nodes}\r\n      edges={edges}\r\n      onNodesChange={onNodesChange}\r\n      onEdgesChange={onEdgesChange}\r\n      onConnect={onConnect}\r\n      onInit={onInit}\r\n      fitView\r\n      attributionPosition=\"top-right\"\r\n    >\r\n      <MiniMap\r\n        nodeStrokeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n          if (n.type === \"input\") return \"#0041d0\";\r\n          if (n.type === \"output\") return \"#ff0072\";\r\n          if (n.type === \"default\") return \"#1a192b\";\r\n\r\n          return \"#eee\";\r\n        }}\r\n        nodeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n\r\n          return \"#fff\";\r\n        }}\r\n        nodeBorderRadius={2}\r\n      />\r\n      <Controls />\r\n      <Background color=\"#aaa\" gap={16} />\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default OverviewFlow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\crudOperations\\\\frontend-apis\\\\src\\\\OverviewFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from \"react\";\nimport ReactFlow, { addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from \"reactflow\";\nimport { nodes as initialNodes, edges as initialEdges } from \"./initial-elements\";\nimport CustomNode from \"./CustomNode\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst minimapStyle = {\n  height: 120\n};\nconst onInit = reactFlowInstance => console.log(\"flow loaded:\", reactFlowInstance);\nconst OverviewFlow = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map(edge => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find(node => node.type === \"custom\").data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n    return edge;\n  });\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edgesWithUpdatedTypes,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect,\n    onInit: onInit,\n    fitView: true,\n    attributionPosition: \"top-right\",\n    nodeTypes: nodeTypes,\n    children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n      style: minimapStyle,\n      zoomable: true,\n      pannable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Background, {\n      color: \"#aaa\",\n      gap: 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(OverviewFlow, \"mmoxFmHOvuuD77aIm5gUqDEdUKU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = OverviewFlow;\nexport default OverviewFlow;\nvar _c;\n$RefreshReg$(_c, \"OverviewFlow\");","map":{"version":3,"names":["React","useCallback","ReactFlow","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","nodes","initialNodes","edges","initialEdges","CustomNode","jsxDEV","_jsxDEV","nodeTypes","custom","minimapStyle","height","onInit","reactFlowInstance","console","log","OverviewFlow","_s","setNodes","onNodesChange","setEdges","onEdgesChange","onConnect","params","eds","edgesWithUpdatedTypes","map","edge","sourceHandle","edgeType","find","node","type","data","selects","fitView","attributionPosition","children","style","zoomable","pannable","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","_c","$RefreshReg$"],"sources":["D:/crudOperations/frontend-apis/src/OverviewFlow.js"],"sourcesContent":["import React, { useCallback } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from \"reactflow\";\r\n\r\nimport {\r\n  nodes as initialNodes,\r\n  edges as initialEdges,\r\n} from \"./initial-elements\";\r\nimport CustomNode from \"./CustomNode\";\r\n\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nconst minimapStyle = {\r\n  height: 120,\r\n};\r\n\r\nconst onInit = (reactFlowInstance) =>\r\n  console.log(\"flow loaded:\", reactFlowInstance);\r\n\r\nconst OverviewFlow = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    []\r\n  );\r\n\r\n  // we are using a bit of a shortcut here to adjust the edge type\r\n  // this could also be done with a custom edge for example\r\n  const edgesWithUpdatedTypes = edges.map((edge) => {\r\n    if (edge.sourceHandle) {\r\n      const edgeType = nodes.find((node) => node.type === \"custom\").data\r\n        .selects[edge.sourceHandle];\r\n      edge.type = edgeType;\r\n    }\r\n\r\n    return edge;\r\n  });\r\n\r\n  return (\r\n    <ReactFlow\r\n      nodes={nodes}\r\n      edges={edgesWithUpdatedTypes}\r\n      onNodesChange={onNodesChange}\r\n      onEdgesChange={onEdgesChange}\r\n      onConnect={onConnect}\r\n      onInit={onInit}\r\n      fitView\r\n      attributionPosition=\"top-right\"\r\n      nodeTypes={nodeTypes}\r\n    >\r\n      <MiniMap style={minimapStyle} zoomable pannable />\r\n      <Controls />\r\n      <Background color=\"#aaa\" gap={16} />\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default OverviewFlow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,SAAS,IACdC,OAAO,EACPC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,QACR,WAAW;AAElB,SACEC,KAAK,IAAIC,YAAY,EACrBC,KAAK,IAAIC,YAAY,QAChB,oBAAoB;AAC3B,OAAOC,UAAU,MAAM,cAAc;AAErC,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAEJ;AACV,CAAC;AAED,MAAMK,YAAY,GAAG;EACnBC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,MAAM,GAAIC,iBAAiB,IAC/BC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,iBAAiB,CAAC;AAEhD,MAAMG,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAAChB,KAAK,EAAEiB,QAAQ,EAAEC,aAAa,CAAC,GAAGpB,aAAa,CAACG,YAAY,CAAC;EACpE,MAAM,CAACC,KAAK,EAAEiB,QAAQ,EAAEC,aAAa,CAAC,GAAGrB,aAAa,CAACI,YAAY,CAAC;EACpE,MAAMkB,SAAS,GAAG7B,WAAW,CAC1B8B,MAAM,IAAKH,QAAQ,CAAEI,GAAG,IAAK7B,OAAO,CAAC4B,MAAM,EAAEC,GAAG,CAAC,CAAC,EACnD,EACF,CAAC;;EAED;EACA;EACA,MAAMC,qBAAqB,GAAGtB,KAAK,CAACuB,GAAG,CAAEC,IAAI,IAAK;IAChD,IAAIA,IAAI,CAACC,YAAY,EAAE;MACrB,MAAMC,QAAQ,GAAG5B,KAAK,CAAC6B,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,QAAQ,CAAC,CAACC,IAAI,CAC/DC,OAAO,CAACP,IAAI,CAACC,YAAY,CAAC;MAC7BD,IAAI,CAACK,IAAI,GAAGH,QAAQ;IACtB;IAEA,OAAOF,IAAI;EACb,CAAC,CAAC;EAEF,oBACEpB,OAAA,CAACb,SAAS;IACRO,KAAK,EAAEA,KAAM;IACbE,KAAK,EAAEsB,qBAAsB;IAC7BN,aAAa,EAAEA,aAAc;IAC7BE,aAAa,EAAEA,aAAc;IAC7BC,SAAS,EAAEA,SAAU;IACrBV,MAAM,EAAEA,MAAO;IACfuB,OAAO;IACPC,mBAAmB,EAAC,WAAW;IAC/B5B,SAAS,EAAEA,SAAU;IAAA6B,QAAA,gBAErB9B,OAAA,CAACX,OAAO;MAAC0C,KAAK,EAAE5B,YAAa;MAAC6B,QAAQ;MAACC,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDrC,OAAA,CAACV,QAAQ;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACZrC,OAAA,CAACT,UAAU;MAAC+C,KAAK,EAAC,MAAM;MAACC,GAAG,EAAE;IAAG;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEhB,CAAC;AAAC3B,EAAA,CArCID,YAAY;EAAA,QACyBjB,aAAa,EACbC,aAAa;AAAA;AAAA+C,EAAA,GAFlD/B,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}